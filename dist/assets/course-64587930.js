import{aL as p,a0 as c,x as u,L as d,a2 as g}from"./index-fa9ea12f.js";const y=p("course",{state:()=>({courses:[],course:{}}),actions:{async getAll(t){try{const s=await c.get(`/student/${t}/courses`);return this.courses=s.data,s}catch(s){console.log(s)}},async store(t,s){const e=new FormData;e.append("image",s.image),e.append("name",s.name),e.append("description",s.description),e.append("number_of_session",s.number_of_session);try{const o=await c.post(`sub_category/${t}/courses`,e,{headers:{"Content-Type":"multipart/form-data"}});this.courses.push(o.data);const{category:r}=u(d());return r.value.sub_categories=r.value.sub_categories.map(a=>a.id==o.data.sub_category_id?{...a,courses:[...a.courses,{...o.data,sub_category:{...a,courses:null}}]}:a),o}catch(o){console.log(o)}},async delete(t,s){try{const e=await c.delete(`sub_category/${t}/courses/${s}`);this.courses=this.courses.filter(a=>a.id!=s);const{category:o}=u(d()),r=o.value.sub_categories.find(a=>a.id==t);return r&&(r.courses=r.courses.filter(a=>a.id!=s)),e}catch(e){console.log(e)}},async update(t,s,e){try{const o=await c.put(`sub_category/${t}/courses/${s}`,{...e});this.courses=this.courses.map(n=>n.id==s?{...n,name:e.name,number_of_session:e.number_of_session,description:e.description,sub_category_id:e.sub_category_id}:n);const{category:r}=u(d()),a=r.value.sub_categories.find(n=>n.id==t);return a&&(a.courses=a.courses.map(n=>n.id==s?{...n,name:e.name,number_of_session:e.number_of_session,description:e.description,sub_category_id:e.sub_category_id}:n)),o}catch(o){console.log(o)}},async changeImage(t,s,e){const o=new FormData;o.append("image",e);try{const r=await c.post(`/sub_category/${t}/courses/${s}/change-image`,o,{headers:{"Content-Type":"multipart/form-data"}}),{category:a}=u(d());return a.value.sub_categories=a.value.sub_categories.map(n=>n.id==t?{...n,courses:n.courses.map(i=>i.id==s?{...i,image:r.data}:i)}:n),r}catch(r){console.log(r)}},async add_attendee(t,s,e){try{const o=await c.post(`/course/${t}/add_attendee`,{student_id:s,date:e}),{students:r}=u(g());return r.value=r.value.map(a=>a.id==s?{...a,attendances:[...a.attendances,...o.data]}:a),o}catch(o){console.log(o)}},async remove_attendee(t,s){try{const e=await c.delete(`course/${t}/student/${s}/remove_attendee`);return this.courses=this.courses.filter(o=>o.id!=t),e}catch(e){console.log(e)}}}});export{y as u};
